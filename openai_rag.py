# -*- coding: utf-8 -*-
"""OpenAI_RAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rFklb2RTrBj3Iyy8lIlo3WV4QPKoXplP
"""

!pip install faiss-cpu numpy langchain-openai langchain-community

OPENAI_API_KEY = " " # API Key Here

import os
import faiss
import numpy as np
from langchain_openai import OpenAIEmbeddings, OpenAI
from langchain_community.vectorstores import FAISS

# Initialize the embeddings model
embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

# Example documents
# Provide any information in the form of text on which you want to train
documents = [
    '''In an alternate timeline, India, known as Bhavya Bharat, rose as a beacon of technological and cultural innovation centuries ahead of its time. After uniting its diverse kingdoms under the visionary ruler Emperor Samrat Aryavarta, the nation blended ancient wisdom with cutting-edge advancements. By harnessing renewable energy through solar crystals inspired by Vedic principles, the empire powered its sprawling cities without harming nature. Education thrived as Nalanda 2.0, a floating university, attracted scholars worldwide, while cities floated on artificial islands, connected by magnetic trains. Despite external invasions, Bhavya Bharat's ethos of unity and peace disarmed conflicts, turning foes into allies. The world watched in awe as the nation balanced tradition and progress, proving that harmony between humanity and technology could indeed exist.'''
]

# Convert documents to embeddings
document_embeddings = embeddings.embed_documents(documents)
document_embeddings = np.array(document_embeddings).astype('float32')

# Initialize FAISS index and add document embeddings
dimension = document_embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(document_embeddings)

# Define a retriever class
class SimpleRetriever:
    def __init__(self, index, documents):
        self.index = index
        self.documents = documents

    def retrieve(self, query, top_k=1):
        query_embedding = np.array([embeddings.embed_query(query)]).astype('float32')
        _, indices = self.index.search(query_embedding, top_k)
        return [self.documents[i] for i in indices[0]]

retriever = SimpleRetriever(index, documents)

# Combine the retriever with the generator
class SimpleRAG:
    def __init__(self, llm, retriever):
        self.llm = llm
        self.retriever = retriever

    def generate(self, query):
        retrieved_docs = self.retriever.retrieve(query)
        augmented_query = f"Context: {' '.join(retrieved_docs)} Query: {query}"
        response = self.llm.invoke(augmented_query)
        print(response)
        return response

llm = OpenAI(api_key=OPENAI_API_KEY)
rag = SimpleRAG(llm, retriever)

# Example usage
query = "Can you explain how Bhavya Bharat in the hypothetical timeline managed to integrate ancient wisdom with advanced technology to create a harmonious society?"
response = rag.generate(query)
print(response)

print(response)